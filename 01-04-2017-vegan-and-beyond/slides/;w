#+TITLE:        Blockchain and Beyond
#+AUTHOR:       Erwin Rooijakkers
#+EMAIL:        erwin.rooijakkers@gmail.com
#+DATE:         21-01-2017
#+LANGUAGE:     en
#+OPTIONS:      H:2 num:t toc:nil \n:nil ::t |:t ^:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc <:t
#+OPTIONS:      d:nil todo:t pri:nil
#+STARTUP:      beamer
#+LATEX_HEADER: \usetheme{metropolis}
#+LATEX_HEADER: \setbeamertemplate{frame footer}{\color{lightgray}Erwin Rooijakkers - Blockchain and Beyond}
#+LATEX_HEADER: \metroset{block=fill}

** Agenda

- Consensus
  - Paxos
  - Distributed consensus
- Blockchain
  - What is the blockchain?
  - Bitcoin
  - Problems with Bitcoin
- Meditation session
- Ethereum
  - White paper
  - Smart contracts
- Quantum blockchain
- Blockchain applications
- Beyond

* Consensus

* The blockchain
** What is the blockchain?
#+begin_quotation
"A shared, programmable, cryptographically secure and therefore trusted ledger
which no single user controls and which can be inspected by everyone." -- Klaus
Schwab (Chairman World Economic Forum)
#+end_quotation

Second-generation blockchain:
#+begin_quotation
A programming language that allows users to write more sophisticated smart
contracts, thus creating invoices that pay themselves when a shipment arrives or
share certificates which automatically send their owners dividends if profits
reach a certain level. (The Economist)
#+end_quotation

** What is the blockchain?
- Two kinds of *records*:
  - Transactions
  - Blocks: batches of *valid transactions* that are hashed and encoded into a *Merkle tree*
- Each block includes the *hash* of the *prior* block in the blockchain, linking the two.
- *Decentralized* (eliminate risk of data held centrally)
- Every *node* or *miner* has whole copy
  - No *centralized* "official" copy
- Data is *incorruptible*
- *Quality* by massive data *replication* and *computational trust*

** Public key cryptography
- A *public key*
  - (a long, randomly-generated string of numbers) is an address on the blockchain. Bitcoins sent across the network are recorded as belonging to that address.
- A *private key* is like a password that gives its owner access to their
digital assets or otherwise interact with the various capabilities that
blockchains now support.
** Hashing

** Merkle tree
#+begin_quotation
Merkle trees are a fundamental part of what makes blockchains tick. Although it
is definitely theoretically possible to make a blockchain without Merkle trees,
simply by creating giant block headers that directly contain every transaction,
doing so poses large scalability challenges that arguably puts the ability to
trustlessly use blockchains out of the reach of all but the most powerful
computers in the long term. Thanks to Merkle trees, it is possible to build
Ethereum nodes that run on all computers and laptops large and small, smart
phones, and even internet of things devices (Merkling in Ethereum)
#+end_quotation

** Merkle tree (Wikipedia)
#+ATTR_LATEX: width=\textwidth
[[file:../images/Hash_Tree.png]]

** Quiz
- Demonstrating that a leaf node is a part of the given hash tree requires processing an amount of data proportional to the *logarithm of the number of nodes of the tree*.
*** Quiz :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:
Why logarithmic?

** Merkle proof
Someone reading the proof can verify that the hashing, at least for that branch,
is consistent going all the way up the tree, and therefore that the given chunk
actually is at that position in the tree.

** Video - ChainThat

*** Merkle trees and hashing :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:
https://youtu.be/lik9aaFIsl4

** What is a Merkle proof? (Quora)

#+ATTR_LATEX: width=\textwidth
file:../images/merkle_proof.png

*** Quiz :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:
What is a *hash collision*?

* Bitcoin
** The first blockchain
- 2008
- The first blockchain
- Solved the *double spending problem*
- High fault-tolerance for *Byzantine Generals' Problem*
- *Public ledger*
- Uses *Merkle proofs* in order to store the transactions in every block

** The Bitcoin blockchain

#+ATTR_LATEX: width=\textwidth
file:../images/mining.jpeg
(https://blog.ethereum.org/2015/11/15/merkling-in-ethereum/)

- *Simplified payment verification*
- Instead of downloading every transaction, *light clients* only download the *the chain of block headers*
  - 80 bytes
- Verification by *Merkle proof*

** Problems with the Bitcoin blockchain
- *Light clients* cannot prove anything about the currents state, like:
  - Digital asset holdings
  - Name registrations
  - The status of financial contracts
  - How many bitcoins do you have right now?
- You might need to authenticate *the entire chain*!
- Ethereum takes the concept one step further
- "Follow the money*


* Bitcoin
** Video - Computerphile
*** Ross Anderson (Cambridge) :B_alertblock:
:PROPERTIES:
:BEAMER_env: alertblock
:END:
Bitcoin: https://youtu.be/JyxRH18YlpA
Problems: https://youtu.be/s2XHyzPA9Zc

* Meditation session
* Ethereum!
** Three Merkle threes per block header
- Transactions
- Receipts
- State
- Unlike transaction history, state needs to be updated
- Not a binary Merkle tree, but a Patricia tree
  - New root value needs to be calculated after insertion, update, or delete.
  - Bounded depth
  - 16 children per node
  - Root value only *depends on data*, not on *order*
  - *path* trough the tree towards particularly value is encoded

** Facilitates things like
- Has this transaction been included in a particular block? (*transaction tree*)
- Tell me all instances of an event of type X (eg. a crowdfunding contract reaching its goal) emitted by this address in the past 30 days (*receipt three*)
- What is the current balance of my account? (*state tree*)
- Does this account exist? (*state tree*)
- Pretend to run this transaction on this contract. What would the output be? (*state tree, special!*)
  - *Merkle state transition proof*

** Merkle state transition proof


- If you run transaction *T* on the state with root *S*, the result will be a state with root *S*, with log *L* and output *O*”
- “output” exists as a concept in Ethereum because every transaction is a function call.

- Enables the coding of *smart contracts* that will execute when specified conditions are met.
- Extensible programming instructions which both define and execute an agreement.
- Ethereum is an open source blockchain project that is built specifically to realize this possibility by implementing a *Turing-complete* programming language capability to implement such contracts
* Applications

** The immense potential
#+begin_quotation
"With blockchain, we can imagine a world in which contracts are embedded in
digital code and stored in transparent, shared databases, where they are
protected from deletion, tampering, and revision. In this world every agreement,
every process, every task, and every payment would have a digital record and
signature that could be identified, validated, stored, and shared.
Intermediaries like lawyers, brokers, and bankers might no longer be necessary.
Individuals, organizations, machines, and algorithms would freely transact and
interact with one another with little friction. This is the immense potential of
blockchain." Iansiti, Marco; Lakhani, Karim R. (January 2017). "The Truth About
Blockchain". **Harvard Business Review**. Harvard University.
#+end_quotation

** Applications currently
- Cryptocurrencies
- Georgia: blockchain based *property-*registry
- Factom as a *distributed registry*
- Gems for *decentralized messaging*
- MaidSafe for *decentralized applications*
- Storj for a *distributed cloud*
- Tezos for *decentralized voting*
- Online *voting*
- *Medical records*
- Data storage
- Smart contracts (reduce moral hazards)

** Smart contracts
** HelloData



Coding of contracts that will execute when specified conditions are met

* Demo?
** Sources

- https://en.wikipedia.org/wiki/Blockchain_(database)
- https://blog.ethereum.org/2015/11/15/merkling-in-ethereum/
- https://monax.io/explainers/permissioned_blockchains/
- https://github.com/ethereum/wiki/wiki/White-Paper
